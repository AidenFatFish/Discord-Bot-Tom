def stringtolist(x):
  placeholder = ""
  placeholderlist = []
  # removes spaces
  for i in x:
    if i != " ":
      placeholder += i
  pholder2 = ""
  for i in placeholder:
    if i == ',':
      placeholderlist.append(float(pholder2))
      pholder2 = ""
    else:
      pholder2 += i
  placeholderlist.append(float(pholder2))
  return(placeholderlist)





import discord
import os
import random
client = discord.Client()

@client.event
async def on_ready():
    print("I'm in")
    print(client.user)
people_and_number_of_messages = []
@client.event
async def on_message(message):
    if message.author != client.user:
        if message.content == "|hello":
          await message.channel.send("Hello!")
        if message.content == "|xkcd":
          await message.channel.send(f"https://xkcd.com/{random.randint(1,2355)}/")
        if message.content == "|kick me":
          discord.Member = message.author
          print(message.author)          
          await discord.Member.kick(reason = None)
        if message.content == "|Analog interface":
          print(message.content)
          await message.delete()
          if message.author.id == 515704039686668310:
            await message.channel.send(input("What do you want Samaritan to say: "))
        if message.content == "Samaritan, I summon you, smite this chat":
          for i in range(100):
            if message.author.id == 515704039686668310: 
              await message.channel.send("** ** \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ** **")   
        if message.content.startswith("|statistics "):
          breakdownlist = []
          for i in message.content:
            breakdownlist.append(i)
          breakdownlist = breakdownlist[13:len(breakdownlist) - 1]
          breakdownmessage = ""
          for i in breakdownlist:
            breakdownmessage += i
          allnumbers = stringtolist(breakdownmessage)
          print(stringtolist(breakdownmessage))
          await message.channel.send(f"The mean of the data set is {sum(allnumbers) / len(allnumbers)}")

          await message.channel.send(f"The range of the data set is {max(allnumbers) - min(allnumbers)}")



token = os.environ.get("DISCORD_BOT_SECRET")
client.run(token)
await message.channel.send(f"The mean of the data set is {sum(allnumbers) / len(allnumbers)}")

          await message.channel.send(f"The range of the data set is {max(allnumbers) - min(allnumbers)}")